/*
 * nomad
 *
 * Documentation of the Nomad v1 API.
 *
 * API version: 1.0.0
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// DesiredTransition DesiredTransition is used to mark an allocation as having a desired state transition. This information can be used by the scheduler to make the correct decision.
type DesiredTransition struct {
	// ForceReschedule is used to indicate that this allocation must be rescheduled. This field is only used when operators want to force a placement even if a failed allocation is not eligible to be rescheduled
	ForceReschedule *bool `json:"ForceReschedule,omitempty"`
	// Migrate is used to indicate that this allocation should be stopped and migrated to another node.
	Migrate *bool `json:"Migrate,omitempty"`
	// Reschedule is used to indicate that this allocation is eligible to be rescheduled. Most allocations are automatically eligible for rescheduling, so this field is only required when an allocation is not automatically eligible. An example is an allocation that is part of a deployment.
	Reschedule *bool `json:"Reschedule,omitempty"`
}

// NewDesiredTransition instantiates a new DesiredTransition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDesiredTransition() *DesiredTransition {
	this := DesiredTransition{}
	return &this
}

// NewDesiredTransitionWithDefaults instantiates a new DesiredTransition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDesiredTransitionWithDefaults() *DesiredTransition {
	this := DesiredTransition{}
	return &this
}

// GetForceReschedule returns the ForceReschedule field value if set, zero value otherwise.
func (o *DesiredTransition) GetForceReschedule() bool {
	if o == nil || o.ForceReschedule == nil {
		var ret bool
		return ret
	}
	return *o.ForceReschedule
}

// GetForceRescheduleOk returns a tuple with the ForceReschedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesiredTransition) GetForceRescheduleOk() (*bool, bool) {
	if o == nil || o.ForceReschedule == nil {
		return nil, false
	}
	return o.ForceReschedule, true
}

// HasForceReschedule returns a boolean if a field has been set.
func (o *DesiredTransition) HasForceReschedule() bool {
	if o != nil && o.ForceReschedule != nil {
		return true
	}

	return false
}

// SetForceReschedule gets a reference to the given bool and assigns it to the ForceReschedule field.
func (o *DesiredTransition) SetForceReschedule(v bool) {
	o.ForceReschedule = &v
}

// GetMigrate returns the Migrate field value if set, zero value otherwise.
func (o *DesiredTransition) GetMigrate() bool {
	if o == nil || o.Migrate == nil {
		var ret bool
		return ret
	}
	return *o.Migrate
}

// GetMigrateOk returns a tuple with the Migrate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesiredTransition) GetMigrateOk() (*bool, bool) {
	if o == nil || o.Migrate == nil {
		return nil, false
	}
	return o.Migrate, true
}

// HasMigrate returns a boolean if a field has been set.
func (o *DesiredTransition) HasMigrate() bool {
	if o != nil && o.Migrate != nil {
		return true
	}

	return false
}

// SetMigrate gets a reference to the given bool and assigns it to the Migrate field.
func (o *DesiredTransition) SetMigrate(v bool) {
	o.Migrate = &v
}

// GetReschedule returns the Reschedule field value if set, zero value otherwise.
func (o *DesiredTransition) GetReschedule() bool {
	if o == nil || o.Reschedule == nil {
		var ret bool
		return ret
	}
	return *o.Reschedule
}

// GetRescheduleOk returns a tuple with the Reschedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesiredTransition) GetRescheduleOk() (*bool, bool) {
	if o == nil || o.Reschedule == nil {
		return nil, false
	}
	return o.Reschedule, true
}

// HasReschedule returns a boolean if a field has been set.
func (o *DesiredTransition) HasReschedule() bool {
	if o != nil && o.Reschedule != nil {
		return true
	}

	return false
}

// SetReschedule gets a reference to the given bool and assigns it to the Reschedule field.
func (o *DesiredTransition) SetReschedule(v bool) {
	o.Reschedule = &v
}

func (o DesiredTransition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ForceReschedule != nil {
		toSerialize["ForceReschedule"] = o.ForceReschedule
	}
	if o.Migrate != nil {
		toSerialize["Migrate"] = o.Migrate
	}
	if o.Reschedule != nil {
		toSerialize["Reschedule"] = o.Reschedule
	}
	return json.Marshal(toSerialize)
}

type NullableDesiredTransition struct {
	value *DesiredTransition
	isSet bool
}

func (v NullableDesiredTransition) Get() *DesiredTransition {
	return v.value
}

func (v *NullableDesiredTransition) Set(val *DesiredTransition) {
	v.value = val
	v.isSet = true
}

func (v NullableDesiredTransition) IsSet() bool {
	return v.isSet
}

func (v *NullableDesiredTransition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesiredTransition(val *DesiredTransition) *NullableDesiredTransition {
	return &NullableDesiredTransition{value: val, isSet: true}
}

func (v NullableDesiredTransition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesiredTransition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


