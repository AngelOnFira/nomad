/*
 * nomad
 *
 * Documentation of the Nomad v1 API.
 *
 * API version: 1.0.0
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// PlanOptions PlanOptions is used to pass through job planning parameters
type PlanOptions struct {
	Diff *bool `json:"Diff,omitempty"`
	PolicyOverride *bool `json:"PolicyOverride,omitempty"`
}

// NewPlanOptions instantiates a new PlanOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanOptions() *PlanOptions {
	this := PlanOptions{}
	return &this
}

// NewPlanOptionsWithDefaults instantiates a new PlanOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanOptionsWithDefaults() *PlanOptions {
	this := PlanOptions{}
	return &this
}

// GetDiff returns the Diff field value if set, zero value otherwise.
func (o *PlanOptions) GetDiff() bool {
	if o == nil || o.Diff == nil {
		var ret bool
		return ret
	}
	return *o.Diff
}

// GetDiffOk returns a tuple with the Diff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanOptions) GetDiffOk() (*bool, bool) {
	if o == nil || o.Diff == nil {
		return nil, false
	}
	return o.Diff, true
}

// HasDiff returns a boolean if a field has been set.
func (o *PlanOptions) HasDiff() bool {
	if o != nil && o.Diff != nil {
		return true
	}

	return false
}

// SetDiff gets a reference to the given bool and assigns it to the Diff field.
func (o *PlanOptions) SetDiff(v bool) {
	o.Diff = &v
}

// GetPolicyOverride returns the PolicyOverride field value if set, zero value otherwise.
func (o *PlanOptions) GetPolicyOverride() bool {
	if o == nil || o.PolicyOverride == nil {
		var ret bool
		return ret
	}
	return *o.PolicyOverride
}

// GetPolicyOverrideOk returns a tuple with the PolicyOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanOptions) GetPolicyOverrideOk() (*bool, bool) {
	if o == nil || o.PolicyOverride == nil {
		return nil, false
	}
	return o.PolicyOverride, true
}

// HasPolicyOverride returns a boolean if a field has been set.
func (o *PlanOptions) HasPolicyOverride() bool {
	if o != nil && o.PolicyOverride != nil {
		return true
	}

	return false
}

// SetPolicyOverride gets a reference to the given bool and assigns it to the PolicyOverride field.
func (o *PlanOptions) SetPolicyOverride(v bool) {
	o.PolicyOverride = &v
}

func (o PlanOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Diff != nil {
		toSerialize["Diff"] = o.Diff
	}
	if o.PolicyOverride != nil {
		toSerialize["PolicyOverride"] = o.PolicyOverride
	}
	return json.Marshal(toSerialize)
}

type NullablePlanOptions struct {
	value *PlanOptions
	isSet bool
}

func (v NullablePlanOptions) Get() *PlanOptions {
	return v.value
}

func (v *NullablePlanOptions) Set(val *PlanOptions) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanOptions) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanOptions(val *PlanOptions) *NullablePlanOptions {
	return &NullablePlanOptions{value: val, isSet: true}
}

func (v NullablePlanOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


