/*
 * nomad
 *
 * Documentation of the Nomad v1 API.
 *
 * API version: 1.0.0
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiv1

import (
	"encoding/json"
)

// QueryMeta QueryMeta is used to return meta data about a query
type QueryMeta struct {
	// Is there a known leader
	KnownLeader *bool `json:"KnownLeader,omitempty"`
	// A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
	LastContact *int64 `json:"LastContact,omitempty"`
	// LastIndex. This can be used as a WaitIndex to perform a blocking query
	LastIndex *int32 `json:"LastIndex,omitempty"`
	// A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
	RequestTime *int64 `json:"RequestTime,omitempty"`
}

// NewQueryMeta instantiates a new QueryMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryMeta() *QueryMeta {
	this := QueryMeta{}
	return &this
}

// NewQueryMetaWithDefaults instantiates a new QueryMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryMetaWithDefaults() *QueryMeta {
	this := QueryMeta{}
	return &this
}

// GetKnownLeader returns the KnownLeader field value if set, zero value otherwise.
func (o *QueryMeta) GetKnownLeader() bool {
	if o == nil || o.KnownLeader == nil {
		var ret bool
		return ret
	}
	return *o.KnownLeader
}

// GetKnownLeaderOk returns a tuple with the KnownLeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryMeta) GetKnownLeaderOk() (*bool, bool) {
	if o == nil || o.KnownLeader == nil {
		return nil, false
	}
	return o.KnownLeader, true
}

// HasKnownLeader returns a boolean if a field has been set.
func (o *QueryMeta) HasKnownLeader() bool {
	if o != nil && o.KnownLeader != nil {
		return true
	}

	return false
}

// SetKnownLeader gets a reference to the given bool and assigns it to the KnownLeader field.
func (o *QueryMeta) SetKnownLeader(v bool) {
	o.KnownLeader = &v
}

// GetLastContact returns the LastContact field value if set, zero value otherwise.
func (o *QueryMeta) GetLastContact() int64 {
	if o == nil || o.LastContact == nil {
		var ret int64
		return ret
	}
	return *o.LastContact
}

// GetLastContactOk returns a tuple with the LastContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryMeta) GetLastContactOk() (*int64, bool) {
	if o == nil || o.LastContact == nil {
		return nil, false
	}
	return o.LastContact, true
}

// HasLastContact returns a boolean if a field has been set.
func (o *QueryMeta) HasLastContact() bool {
	if o != nil && o.LastContact != nil {
		return true
	}

	return false
}

// SetLastContact gets a reference to the given int64 and assigns it to the LastContact field.
func (o *QueryMeta) SetLastContact(v int64) {
	o.LastContact = &v
}

// GetLastIndex returns the LastIndex field value if set, zero value otherwise.
func (o *QueryMeta) GetLastIndex() int32 {
	if o == nil || o.LastIndex == nil {
		var ret int32
		return ret
	}
	return *o.LastIndex
}

// GetLastIndexOk returns a tuple with the LastIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryMeta) GetLastIndexOk() (*int32, bool) {
	if o == nil || o.LastIndex == nil {
		return nil, false
	}
	return o.LastIndex, true
}

// HasLastIndex returns a boolean if a field has been set.
func (o *QueryMeta) HasLastIndex() bool {
	if o != nil && o.LastIndex != nil {
		return true
	}

	return false
}

// SetLastIndex gets a reference to the given int32 and assigns it to the LastIndex field.
func (o *QueryMeta) SetLastIndex(v int32) {
	o.LastIndex = &v
}

// GetRequestTime returns the RequestTime field value if set, zero value otherwise.
func (o *QueryMeta) GetRequestTime() int64 {
	if o == nil || o.RequestTime == nil {
		var ret int64
		return ret
	}
	return *o.RequestTime
}

// GetRequestTimeOk returns a tuple with the RequestTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryMeta) GetRequestTimeOk() (*int64, bool) {
	if o == nil || o.RequestTime == nil {
		return nil, false
	}
	return o.RequestTime, true
}

// HasRequestTime returns a boolean if a field has been set.
func (o *QueryMeta) HasRequestTime() bool {
	if o != nil && o.RequestTime != nil {
		return true
	}

	return false
}

// SetRequestTime gets a reference to the given int64 and assigns it to the RequestTime field.
func (o *QueryMeta) SetRequestTime(v int64) {
	o.RequestTime = &v
}

func (o QueryMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.KnownLeader != nil {
		toSerialize["KnownLeader"] = o.KnownLeader
	}
	if o.LastContact != nil {
		toSerialize["LastContact"] = o.LastContact
	}
	if o.LastIndex != nil {
		toSerialize["LastIndex"] = o.LastIndex
	}
	if o.RequestTime != nil {
		toSerialize["RequestTime"] = o.RequestTime
	}
	return json.Marshal(toSerialize)
}

type NullableQueryMeta struct {
	value *QueryMeta
	isSet bool
}

func (v NullableQueryMeta) Get() *QueryMeta {
	return v.value
}

func (v *NullableQueryMeta) Set(val *QueryMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryMeta(val *QueryMeta) *NullableQueryMeta {
	return &NullableQueryMeta{value: val, isSet: true}
}

func (v NullableQueryMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


