/*
 * nomad
 *
 * Documentation of the Nomad v1 API.
 *
 * API version: 1.0.0
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// RegisterOptions RegisterOptions is used to pass through job registration parameters
type RegisterOptions struct {
	EnforceIndex *bool `json:"EnforceIndex,omitempty"`
	ModifyIndex *int32 `json:"ModifyIndex,omitempty"`
	PolicyOverride *bool `json:"PolicyOverride,omitempty"`
	PreserveCounts *bool `json:"PreserveCounts,omitempty"`
}

// NewRegisterOptions instantiates a new RegisterOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterOptions() *RegisterOptions {
	this := RegisterOptions{}
	return &this
}

// NewRegisterOptionsWithDefaults instantiates a new RegisterOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterOptionsWithDefaults() *RegisterOptions {
	this := RegisterOptions{}
	return &this
}

// GetEnforceIndex returns the EnforceIndex field value if set, zero value otherwise.
func (o *RegisterOptions) GetEnforceIndex() bool {
	if o == nil || o.EnforceIndex == nil {
		var ret bool
		return ret
	}
	return *o.EnforceIndex
}

// GetEnforceIndexOk returns a tuple with the EnforceIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterOptions) GetEnforceIndexOk() (*bool, bool) {
	if o == nil || o.EnforceIndex == nil {
		return nil, false
	}
	return o.EnforceIndex, true
}

// HasEnforceIndex returns a boolean if a field has been set.
func (o *RegisterOptions) HasEnforceIndex() bool {
	if o != nil && o.EnforceIndex != nil {
		return true
	}

	return false
}

// SetEnforceIndex gets a reference to the given bool and assigns it to the EnforceIndex field.
func (o *RegisterOptions) SetEnforceIndex(v bool) {
	o.EnforceIndex = &v
}

// GetModifyIndex returns the ModifyIndex field value if set, zero value otherwise.
func (o *RegisterOptions) GetModifyIndex() int32 {
	if o == nil || o.ModifyIndex == nil {
		var ret int32
		return ret
	}
	return *o.ModifyIndex
}

// GetModifyIndexOk returns a tuple with the ModifyIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterOptions) GetModifyIndexOk() (*int32, bool) {
	if o == nil || o.ModifyIndex == nil {
		return nil, false
	}
	return o.ModifyIndex, true
}

// HasModifyIndex returns a boolean if a field has been set.
func (o *RegisterOptions) HasModifyIndex() bool {
	if o != nil && o.ModifyIndex != nil {
		return true
	}

	return false
}

// SetModifyIndex gets a reference to the given int32 and assigns it to the ModifyIndex field.
func (o *RegisterOptions) SetModifyIndex(v int32) {
	o.ModifyIndex = &v
}

// GetPolicyOverride returns the PolicyOverride field value if set, zero value otherwise.
func (o *RegisterOptions) GetPolicyOverride() bool {
	if o == nil || o.PolicyOverride == nil {
		var ret bool
		return ret
	}
	return *o.PolicyOverride
}

// GetPolicyOverrideOk returns a tuple with the PolicyOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterOptions) GetPolicyOverrideOk() (*bool, bool) {
	if o == nil || o.PolicyOverride == nil {
		return nil, false
	}
	return o.PolicyOverride, true
}

// HasPolicyOverride returns a boolean if a field has been set.
func (o *RegisterOptions) HasPolicyOverride() bool {
	if o != nil && o.PolicyOverride != nil {
		return true
	}

	return false
}

// SetPolicyOverride gets a reference to the given bool and assigns it to the PolicyOverride field.
func (o *RegisterOptions) SetPolicyOverride(v bool) {
	o.PolicyOverride = &v
}

// GetPreserveCounts returns the PreserveCounts field value if set, zero value otherwise.
func (o *RegisterOptions) GetPreserveCounts() bool {
	if o == nil || o.PreserveCounts == nil {
		var ret bool
		return ret
	}
	return *o.PreserveCounts
}

// GetPreserveCountsOk returns a tuple with the PreserveCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterOptions) GetPreserveCountsOk() (*bool, bool) {
	if o == nil || o.PreserveCounts == nil {
		return nil, false
	}
	return o.PreserveCounts, true
}

// HasPreserveCounts returns a boolean if a field has been set.
func (o *RegisterOptions) HasPreserveCounts() bool {
	if o != nil && o.PreserveCounts != nil {
		return true
	}

	return false
}

// SetPreserveCounts gets a reference to the given bool and assigns it to the PreserveCounts field.
func (o *RegisterOptions) SetPreserveCounts(v bool) {
	o.PreserveCounts = &v
}

func (o RegisterOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnforceIndex != nil {
		toSerialize["EnforceIndex"] = o.EnforceIndex
	}
	if o.ModifyIndex != nil {
		toSerialize["ModifyIndex"] = o.ModifyIndex
	}
	if o.PolicyOverride != nil {
		toSerialize["PolicyOverride"] = o.PolicyOverride
	}
	if o.PreserveCounts != nil {
		toSerialize["PreserveCounts"] = o.PreserveCounts
	}
	return json.Marshal(toSerialize)
}

type NullableRegisterOptions struct {
	value *RegisterOptions
	isSet bool
}

func (v NullableRegisterOptions) Get() *RegisterOptions {
	return v.value
}

func (v *NullableRegisterOptions) Set(val *RegisterOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterOptions(val *RegisterOptions) *NullableRegisterOptions {
	return &NullableRegisterOptions{value: val, isSet: true}
}

func (v NullableRegisterOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


