/*
 * nomad
 *
 * Documentation of the Nomad v1 API.
 *
 * API version: 1.0.0
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiv1

import (
	"encoding/json"
)

// TaskGroupSummary TaskGroup summarizes the state of all the allocations of a particular TaskGroup
type TaskGroupSummary struct {
	Complete *int64 `json:"Complete,omitempty"`
	Failed *int64 `json:"Failed,omitempty"`
	Lost *int64 `json:"Lost,omitempty"`
	Queued *int64 `json:"Queued,omitempty"`
	Running *int64 `json:"Running,omitempty"`
	Starting *int64 `json:"Starting,omitempty"`
}

// NewTaskGroupSummary instantiates a new TaskGroupSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskGroupSummary() *TaskGroupSummary {
	this := TaskGroupSummary{}
	return &this
}

// NewTaskGroupSummaryWithDefaults instantiates a new TaskGroupSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskGroupSummaryWithDefaults() *TaskGroupSummary {
	this := TaskGroupSummary{}
	return &this
}

// GetComplete returns the Complete field value if set, zero value otherwise.
func (o *TaskGroupSummary) GetComplete() int64 {
	if o == nil || o.Complete == nil {
		var ret int64
		return ret
	}
	return *o.Complete
}

// GetCompleteOk returns a tuple with the Complete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupSummary) GetCompleteOk() (*int64, bool) {
	if o == nil || o.Complete == nil {
		return nil, false
	}
	return o.Complete, true
}

// HasComplete returns a boolean if a field has been set.
func (o *TaskGroupSummary) HasComplete() bool {
	if o != nil && o.Complete != nil {
		return true
	}

	return false
}

// SetComplete gets a reference to the given int64 and assigns it to the Complete field.
func (o *TaskGroupSummary) SetComplete(v int64) {
	o.Complete = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *TaskGroupSummary) GetFailed() int64 {
	if o == nil || o.Failed == nil {
		var ret int64
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupSummary) GetFailedOk() (*int64, bool) {
	if o == nil || o.Failed == nil {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *TaskGroupSummary) HasFailed() bool {
	if o != nil && o.Failed != nil {
		return true
	}

	return false
}

// SetFailed gets a reference to the given int64 and assigns it to the Failed field.
func (o *TaskGroupSummary) SetFailed(v int64) {
	o.Failed = &v
}

// GetLost returns the Lost field value if set, zero value otherwise.
func (o *TaskGroupSummary) GetLost() int64 {
	if o == nil || o.Lost == nil {
		var ret int64
		return ret
	}
	return *o.Lost
}

// GetLostOk returns a tuple with the Lost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupSummary) GetLostOk() (*int64, bool) {
	if o == nil || o.Lost == nil {
		return nil, false
	}
	return o.Lost, true
}

// HasLost returns a boolean if a field has been set.
func (o *TaskGroupSummary) HasLost() bool {
	if o != nil && o.Lost != nil {
		return true
	}

	return false
}

// SetLost gets a reference to the given int64 and assigns it to the Lost field.
func (o *TaskGroupSummary) SetLost(v int64) {
	o.Lost = &v
}

// GetQueued returns the Queued field value if set, zero value otherwise.
func (o *TaskGroupSummary) GetQueued() int64 {
	if o == nil || o.Queued == nil {
		var ret int64
		return ret
	}
	return *o.Queued
}

// GetQueuedOk returns a tuple with the Queued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupSummary) GetQueuedOk() (*int64, bool) {
	if o == nil || o.Queued == nil {
		return nil, false
	}
	return o.Queued, true
}

// HasQueued returns a boolean if a field has been set.
func (o *TaskGroupSummary) HasQueued() bool {
	if o != nil && o.Queued != nil {
		return true
	}

	return false
}

// SetQueued gets a reference to the given int64 and assigns it to the Queued field.
func (o *TaskGroupSummary) SetQueued(v int64) {
	o.Queued = &v
}

// GetRunning returns the Running field value if set, zero value otherwise.
func (o *TaskGroupSummary) GetRunning() int64 {
	if o == nil || o.Running == nil {
		var ret int64
		return ret
	}
	return *o.Running
}

// GetRunningOk returns a tuple with the Running field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupSummary) GetRunningOk() (*int64, bool) {
	if o == nil || o.Running == nil {
		return nil, false
	}
	return o.Running, true
}

// HasRunning returns a boolean if a field has been set.
func (o *TaskGroupSummary) HasRunning() bool {
	if o != nil && o.Running != nil {
		return true
	}

	return false
}

// SetRunning gets a reference to the given int64 and assigns it to the Running field.
func (o *TaskGroupSummary) SetRunning(v int64) {
	o.Running = &v
}

// GetStarting returns the Starting field value if set, zero value otherwise.
func (o *TaskGroupSummary) GetStarting() int64 {
	if o == nil || o.Starting == nil {
		var ret int64
		return ret
	}
	return *o.Starting
}

// GetStartingOk returns a tuple with the Starting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupSummary) GetStartingOk() (*int64, bool) {
	if o == nil || o.Starting == nil {
		return nil, false
	}
	return o.Starting, true
}

// HasStarting returns a boolean if a field has been set.
func (o *TaskGroupSummary) HasStarting() bool {
	if o != nil && o.Starting != nil {
		return true
	}

	return false
}

// SetStarting gets a reference to the given int64 and assigns it to the Starting field.
func (o *TaskGroupSummary) SetStarting(v int64) {
	o.Starting = &v
}

func (o TaskGroupSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Complete != nil {
		toSerialize["Complete"] = o.Complete
	}
	if o.Failed != nil {
		toSerialize["Failed"] = o.Failed
	}
	if o.Lost != nil {
		toSerialize["Lost"] = o.Lost
	}
	if o.Queued != nil {
		toSerialize["Queued"] = o.Queued
	}
	if o.Running != nil {
		toSerialize["Running"] = o.Running
	}
	if o.Starting != nil {
		toSerialize["Starting"] = o.Starting
	}
	return json.Marshal(toSerialize)
}

type NullableTaskGroupSummary struct {
	value *TaskGroupSummary
	isSet bool
}

func (v NullableTaskGroupSummary) Get() *TaskGroupSummary {
	return v.value
}

func (v *NullableTaskGroupSummary) Set(val *TaskGroupSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskGroupSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskGroupSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskGroupSummary(val *TaskGroupSummary) *NullableTaskGroupSummary {
	return &NullableTaskGroupSummary{value: val, isSet: true}
}

func (v NullableTaskGroupSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskGroupSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


