/*
 * nomad
 *
 * Documentation of the Nomad v1 API.
 *
 * API version: 1.0.0
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiv1

import (
	"encoding/json"
)

// DeregisterOptions DeregisterOptions is used to pass through job deregistration parameters
type DeregisterOptions struct {
	// If Global is set to true, all regions of a multiregion job will be stopped.
	Global *bool `json:"Global,omitempty"`
	// If Purge is set to true, the job is deregistered and purged from the system versus still being queryable and eventually GC'ed from the system. Most callers should not specify purge.
	Purge *bool `json:"Purge,omitempty"`
}

// NewDeregisterOptions instantiates a new DeregisterOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeregisterOptions() *DeregisterOptions {
	this := DeregisterOptions{}
	return &this
}

// NewDeregisterOptionsWithDefaults instantiates a new DeregisterOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeregisterOptionsWithDefaults() *DeregisterOptions {
	this := DeregisterOptions{}
	return &this
}

// GetGlobal returns the Global field value if set, zero value otherwise.
func (o *DeregisterOptions) GetGlobal() bool {
	if o == nil || o.Global == nil {
		var ret bool
		return ret
	}
	return *o.Global
}

// GetGlobalOk returns a tuple with the Global field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeregisterOptions) GetGlobalOk() (*bool, bool) {
	if o == nil || o.Global == nil {
		return nil, false
	}
	return o.Global, true
}

// HasGlobal returns a boolean if a field has been set.
func (o *DeregisterOptions) HasGlobal() bool {
	if o != nil && o.Global != nil {
		return true
	}

	return false
}

// SetGlobal gets a reference to the given bool and assigns it to the Global field.
func (o *DeregisterOptions) SetGlobal(v bool) {
	o.Global = &v
}

// GetPurge returns the Purge field value if set, zero value otherwise.
func (o *DeregisterOptions) GetPurge() bool {
	if o == nil || o.Purge == nil {
		var ret bool
		return ret
	}
	return *o.Purge
}

// GetPurgeOk returns a tuple with the Purge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeregisterOptions) GetPurgeOk() (*bool, bool) {
	if o == nil || o.Purge == nil {
		return nil, false
	}
	return o.Purge, true
}

// HasPurge returns a boolean if a field has been set.
func (o *DeregisterOptions) HasPurge() bool {
	if o != nil && o.Purge != nil {
		return true
	}

	return false
}

// SetPurge gets a reference to the given bool and assigns it to the Purge field.
func (o *DeregisterOptions) SetPurge(v bool) {
	o.Purge = &v
}

func (o DeregisterOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Global != nil {
		toSerialize["Global"] = o.Global
	}
	if o.Purge != nil {
		toSerialize["Purge"] = o.Purge
	}
	return json.Marshal(toSerialize)
}

type NullableDeregisterOptions struct {
	value *DeregisterOptions
	isSet bool
}

func (v NullableDeregisterOptions) Get() *DeregisterOptions {
	return v.value
}

func (v *NullableDeregisterOptions) Set(val *DeregisterOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableDeregisterOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableDeregisterOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeregisterOptions(val *DeregisterOptions) *NullableDeregisterOptions {
	return &NullableDeregisterOptions{value: val, isSet: true}
}

func (v NullableDeregisterOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeregisterOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


